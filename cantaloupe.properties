###########################################################################
# Cantaloupe.properties managed by confd
###########################################################################

# !! Leave blank to use the JVM default temporary directory.
temp_pathname = /tmp

# !! Configures the HTTP server. (Standalone mode only.)
http.enabled = true
http.host = 0.0.0.0
http.port = 8182
http.http2.enabled = {{ getenv "HTTP_HTTP2_ENABLED" }}

# !! Configures the HTTPS server. (Standalone mode only.)
https.enabled = false
https.host = 0.0.0.0
https.port = 8183
# Secure HTTP/2 requires Java 9 or later.
https.http2.enabled = false

# !! Available values are `JKS` and `PKCS12`. (Standalone mode only.)
https.key_store_type = JKS
https.key_store_password = myPassword
https.key_store_path = /path/to/keystore.jks
https.key_password = myPassword

# !! Maximum size of the HTTP(S) request queue. Set to 0 to use the default.
http.accept_queue_limit = {{ getenv "HTTP_ACCEPT_QUEUE_LIMIT" }}

# Base URI to use for internal links, such as Link headers and JSON-LD
# @id values, in a reverse-proxy context. This should only be used when
# X-Forwarded-* headers cannot be used instead. (See the user manual.)
base_uri = {{ getenv "BASE_URI" }}

# Normally, slashes in a URI path component must be percent-encoded as
# "%2F". If your proxy is not able to pass these through without decoding,
# you can define an alternate character or character sequence to substitute
# for a slash. Supply the non-percent-encoded version here, and use the
# percent-encoded version in URLs.
slash_substitute = {{ getenv "SLASH_SUBSTITUTE" }}

# Maximum number of pixels to return in a response, to prevent overloading
# the server. Requests for more pixels than this will receive an error
# response. Set to 0 for no maximum.
max_pixels = {{ getenv "MAX_PIXELS" }}

# Errors will also be logged to the error log (if enabled).
print_stack_trace_on_error_pages = {{ getenv "PRINT_STACK_TRACE_ON_ERROR_PAGES" }}

###########################################################################
# DELEGATE SCRIPT
###########################################################################

# !! Enables the delegate script: a Ruby script containing various delegate
# methods. (See the user manual.)
delegate_script.enabled = {{ getenv "DELEGATE_SCRIPT_ENABLED" }}

# !! This can be an absolute path, or a filename; if only a filename is
# specified, it will be searched for in the same folder as this file, and
# then the current working directory.
delegate_script.pathname = {{ getenv "DELEGATE_SCRIPT_PATHNAME" }}

# Enables the invocation cache, which caches method invocations and return
# values in memory. See the user manual for more information.
delegate_script.cache.enabled = {{ getenv "DELEGATE_SCRIPT_CACHE_ENABLED" }}

###########################################################################
# ENDPOINTS
###########################################################################

# !! Configures HTTP Basic authentication in all public endpoints.
endpoint.public.auth.basic.enabled = {{ getenv "ENDPOINT_PUBLIC_AUTH_BASIC_ENABLED" }}
endpoint.public.auth.basic.username = {{ getenv "ENDPOINT_PUBLIC_AUTH_BASIC_USERNAME" }}
endpoint.public.auth.basic.secret = {{ getenv "ENDPOINT_PUBLIC_AUTH_BASIC_SECRET" }}

endpoint.iiif.1.enabled = {{ getenv "ENDPOINT_IIIF_1_ENABLED" }}
endpoint.iiif.2.enabled = {{ getenv "ENDPOINT_IIIF_2_ENABLED" }}

# Controls the response Content-Disposition header for images. Allowed
# values are `inline`, `attachment`, and `none`. This can be overridden
# using the ?response-content-disposition query argument.
endpoint.iiif.content_disposition = {{ getenv "ENDPOINT_IIIF_CONTENT_DISPOSITION" }}

# Minimum size that will be used in info.json `sizes` keys.
endpoint.iiif.min_size = {{ getenv "ENDPOINT_IIIF_MIN_SIZE" }}

# Minimum size that will be used in info.json `tiles` keys. See the user
# manual to learn how these are calculated.
endpoint.iiif.min_tile_size = {{ getenv "ENDPOINT_IIIF_MIN_TILE_SIZE" }}

# If true, requests for sizes other than those specified in an info.json
# response will be denied.
endpoint.iiif.2.restrict_to_sizes = {{ getenv "ENDPOINT_IIIF_2_RESTRICT_TO_SIZES" }}

# Enables the Control Panel, at /admin.
endpoint.admin.enabled = {{ getenv "ENDPOINT_ADMIN_ENABLED" }}
endpoint.admin.username = {{ getenv "ENDPOINT_ADMIN_USERNAME" }}
endpoint.admin.secret = {{ getenv "ENDPOINT_ADMIN_SECRET" }}

# Enables the administrative HTTP API. (See the user manual.)
endpoint.api.enabled = {{ getenv "ENDPOINT_API_ENABLED" }}

# HTTP Basic credentials to access the HTTP API.
endpoint.api.username = {{ getenv "ENDPOINT_API_USERNAME" }}
endpoint.api.secret = {{ getenv "ENDPOINT_API_SECRET" }}

###########################################################################
# RESOLVERS
###########################################################################

# Specifies one resolver to translate the identifier in the URL to an image
# source for all requests. Available values are `FilesystemResolver`,
# `HttpResolver`, `JdbcResolver`, `AmazonS3Resolver`, and
# `AzureStorageResolver`.
resolver.static = {{ getenv "RESOLVER_STATIC" }}

# If true, `resolver.static` will be overridden, and the
# `get_resolver(identifier)` delegate script method will be used to select
# a resolver per-request.
resolver.delegate = {{ getenv "RESOLVER_DELEGATE" }}

#----------------------------------------
# FilesystemResolver
#----------------------------------------

# How to look up files. Allowed values are `BasicLookupStrategy` and
# `ScriptLookupStrategy`. ScriptLookupStrategy uses the delegate script for
# dynamic lookups; see the user manual.
FilesystemResolver.lookup_strategy = {{ getenv "FILESYSTEMRESOLVER_LOOKUP_STRATEGY" }}

# Server-side path that will be prefixed to the identifier in the URL.
# Trailing slash is important!
FilesystemResolver.BasicLookupStrategy.path_prefix = {{ getenv "FILESYSTEMRESOLVER_BASICLOOKUPSTRATEGY_PATH_PREFIX" }}

# Server-side path or extension that will be suffixed to the identifier in
# the URL.
FilesystemResolver.BasicLookupStrategy.path_suffix = {{ getenv "FILESYSTEMRESOLVER_BASICLOOKUPSTRATEGY_PATH_SUFFIX" }}

#----------------------------------------
# HttpResolver
#----------------------------------------

HttpResolver.trust_all_certs = {{ getenv "HTTPRESOLVER_TRUST_ALL_CERTS" }}
HttpResolver.request_timeout = {{ getenv "HTTPRESOLVER_REQUEST_TIMEOUT" }}

# Tells HttpResolver how to look up resources. Allowed values are
# `BasicLookupStrategy` and `ScriptLookupStrategy`. ScriptLookupStrategy
# uses the delegate script for dynamic lookups; see the user manual.
HttpResolver.lookup_strategy = {{ getenv "HTTPRESOLVER_LOOKUP_STRATEGY" }}

# URL that will be prefixed to the identifier in the request URL.
# Trailing slash is important!
HttpResolver.BasicLookupStrategy.url_prefix = {{ getenv "HTTPRESOLVER_BASICLOOKUPSTRATEGY_URL_PREFIX" }}

# Path, extension, query string, etc. that will be suffixed to the
# identifier in the request URL.
HttpResolver.BasicLookupStrategy.url_suffix = {{ getenv "HTTPRESOLVER_BASICLOOKUPSTRATEGY_URL_SUFFIX" }}

# Enables access to resources that require HTTP Basic authentication.
HttpResolver.auth.basic.username = {{ getenv "HTTPRESOLVER_AUTH_BASIC_USERNAME" }}
HttpResolver.auth.basic.secret = {{ getenv "HTTPRESOLVER_AUTH_BASIC_SECRET" }}

#----------------------------------------
# JdbcResolver
#----------------------------------------

# Note: JdbcResolver requires some delegate methods to be implemented in
# addition to the configuration here, and a JDBC driver to be installed on
# the classpath; see the user manual.

# !!
JdbcResolver.url = {{ getenv "JDBCRESOLVER_URL" }}
# !!
JdbcResolver.user = {{ getenv "JDBCRESOLVER_USER" }}
# !!
JdbcResolver.password = {{ getenv "JDBCRESOLVER_PASSWORD" }}

# !! Connection timeout in seconds.
JdbcResolver.connection_timeout = {{ getenv "JDBCRESOLVER_CONNECTION_TIMEOUT" }}

#----------------------------------------
# AmazonS3Resolver
#----------------------------------------

# !! Credentials for your AWS account.
# See: http://aws.amazon.com/security-credentials
# Note that this info can be obtained from elsewhere rather than setting
# it here; see the user manual.
AmazonS3Resolver.access_key_id = {{ getenv "AMAZONS3RESOLVER_ACCESS_KEY_ID" }}
AmazonS3Resolver.secret_key = {{ getenv "AMAZONS3RESOLVER_SECRET_KEY" }}

# !! Name of the bucket containing images to be served.
AmazonS3Resolver.bucket.name = {{ getenv "AMAZONS3RESOLVER_BUCKET_NAME" }}

# !! See: http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region
AmazonS3Resolver.bucket.region = {{ getenv "AMAZONS3RESOLVER_BUCKET_REGION" }}

# Tells AmazonS3Resolver how to look up objects. Allowed values are
# `BasicLookupStrategy` and `ScriptLookupStrategy`. ScriptLookupStrategy
# uses the delegate script for dynamic lookups; see the user manual.
AmazonS3Resolver.lookup_strategy = {{ getenv "AMAZONS3RESOLVER_LOOKUP_STRATEGY" }}

# !! Maximum number of concurrent HTTP connections to AWS. Leave blank to
# use the default.
AmazonS3Resolver.max_connections = {{ getenv "AMAZONS3RESOLVER_MAX_CONNECTIONS" }}

#----------------------------------------
# AzureStorageResolver
#----------------------------------------

# !! Credentials for your Azure account.
AzureStorageResolver.account_name = {{ getenv "AZURESTORAGERESOLVER_ACCOUNT_NAME" }}
AzureStorageResolver.account_key = {{ getenv "AZURESTORAGERESOLVER_ACCOUNT_KEY" }}

# !! Name of the container containing images to be served.
AzureStorageResolver.container_name = {{ getenv "AZURESTORAGERESOLVER_CONTAINER_NAME" }}

# Tells AzureStorageResolver how to look up objects. Allowed values are
# `BasicLookupStrategy` and `ScriptLookupStrategy`. ScriptLookupStrategy
# uses the delegate script for dynamic lookups; see the user manual.
AzureStorageResolver.lookup_strategy = {{ getenv "AZURESTORAGERESOLVER_LOOKUP_STRATEGY" }}

###########################################################################
# PROCESSORS
###########################################################################

#----------------------------------------
# Processor Selection
#----------------------------------------

# Image processors to use for various source formats. Available values are
# `Java2dProcessor`, `GraphicsMagickProcessor`, `ImageMagickProcessor`,
# `KakaduProcessor`, `OpenJpegProcessor`, `JaiProcessor`, `PdfBoxProcessor`,
# and `FfmpegProcessor`.

# These extension-specific definitions are optional.
processor.avi = {{ getenv "PROCESSOR_AVI" }}
processor.bmp = {{ getenv "PROCESSOR_BMP" }}
processor.dcm = {{ getenv "PROCESSOR_DCM" }}
processor.flv = {{ getenv "PROCESSOR_FLV" }}
processor.gif = {{ getenv "PROCESSOR_GIF" }}
processor.jp2 = {{ getenv "PROCESSOR_JP2" }}
processor.jpg = {{ getenv "PROCESSOR_JPG" }}
processor.mov = {{ getenv "PROCESSOR_MOV" }}
processor.mp4 = {{ getenv "PROCESSOR_MP4" }}
processor.mpg = {{ getenv "PROCESSOR_MPG" }}
processor.pdf = {{ getenv "PROCESSOR_PDF" }}
processor.png = {{ getenv "PROCESSOR_PNG" }}
processor.tif = {{ getenv "PROCESSOR_TIF" }}
processor.webm = {{ getenv "PROCESSOR_WEBM" }}
processor.webp = {{ getenv "PROCESSOR_WEBP" }}

# Fall back to this processor for any formats not assigned above.
processor.fallback = {{ getenv "PROCESSOR_FALLBACK" }}

#----------------------------------------
# Global Processor Configuration
#----------------------------------------

# Resolution of vector rasterization (of e.g. PDFs) at a scale of 1.
processor.dpi = {{ getenv "PROCESSOR_DPI" }}

# Expands contrast to utilize available dynamic range. This forces the entire
# source image to be read into memory, so can be slow with large images.
processor.normalize = {{ getenv "PROCESSOR_NORMALIZE" }}

# Color of the background when an image is rotated or alpha-flattened, for
# output formats that don't support transparency.
# This may not be respected for indexed color derivative images.
processor.background_color = {{ getenv "PROCESSOR_BACKGROUND_COLOR" }}

# Available values are `bell`, `bspline`, `bicubic`, `box`, `hermite`,
# `lanczos3`, `mitchell`, `triangle`. (JaiProcessor ignores these.)
processor.downscale_filter = {{ getenv "PROCESSOR_DOWNSCALE_FILTER" }}
processor.upscale_filter = {{ getenv "PROCESSOR_UPSCALE_FILTER" }}

# Intensity of an unsharp mask from 0 to 1.
processor.sharpen = {{ getenv "PROCESSOR_SHARPEN" }}

# Attempts to copy source image metadata (EXIF, IPTC, XMP) into derivative
# images. (This is not foolproof; see the user manual.)
processor.metadata.preserve = {{ getenv "PROCESSOR_METADATA_PRESERVE" }}

# Whether to auto-rotate images using the EXIF `Orientation` field.
# The check for this field can impair performance slightly.
processor.metadata.respect_orientation = {{ getenv "PROCESSOR_METADATA_RESPECT_ORIENTATION" }}

# Whether to reduce images with more than 8 bits per sample to 8 bits.
# This only applies to formats that support >8-bit samples, and not all
# processors respect this setting; see the user manual.
processor.limit_to_8_bits = {{ getenv "PROCESSOR_LIMIT_TO_8_BITS" }}

# Progressive JPEGs are usually more compact.
processor.jpg.progressive = {{ getenv "PROCESSOR_JPG_PROGRESSIVE" }}

# JPEG output quality (1-100).
processor.jpg.quality = {{ getenv "PROCESSOR_JPG_QUALITY" }}

# TIFF output compression type. Available values are `Deflate`, `JPEG`,
# `LZW`, and `RLE`. Leave blank for no compression.
processor.tif.compression = {{ getenv "PROCESSOR_TIF_COMPRESSION" }}

# Available values are `StreamStrategy` and `CacheStrategy`. StreamStrategy
# will try to stream source images from non-filesystem resolvers, when this
# is possible; CacheStrategy will first download them into the source cache
# using FilesystemCache, which must also be configured.
StreamProcessor.retrieval_strategy = {{ getenv "STREAMPROCESSOR_RETRIEVAL_STRATEGY" }}

#----------------------------------------
# FfmpegProcessor
#----------------------------------------

# Optional absolute path of the directory containing the FFmpeg binaries.
# Overrides the PATH.
FfmpegProcessor.path_to_binaries =

#----------------------------------------
# GraphicsMagickProcessor
#----------------------------------------

# !! Optional absolute path of the directory containing the GraphicsMagick
# binary. Overrides the PATH.
GraphicsMagickProcessor.path_to_binaries =

#----------------------------------------
# ImageMagickProcessor
#----------------------------------------

# !! Optional absolute path of the directory containing the ImageMagick
# binary. Overrides the PATH.
ImageMagickProcessor.path_to_binaries =

#----------------------------------------
# KakaduProcessor
#----------------------------------------

# Optional absolute path of the directory containing the Kakadu binaries.
# Overrides the PATH.
KakaduProcessor.path_to_binaries =

#----------------------------------------
# OpenJpegProcessor
#----------------------------------------

# Optional absolute path of the directory containing the OpenJPEG binaries.
# Overrides the PATH.
OpenJpegProcessor.path_to_binaries =

###########################################################################
# CLIENT-SIDE CACHING
###########################################################################

# Whether to enable the response Cache-Control header.
cache.client.enabled = {{ getenv "CACHE_CLIENT_ENABLED" }}

cache.client.max_age = {{ getenv "CACHE_CLIENT_MAX_AGE" }}
cache.client.shared_max_age = {{ getenv "CACHE_CLIENT_SHARED_MAX_AGE" }}
cache.client.public = {{ getenv "CACHE_CLIENT_PUBLIC" }}
cache.client.private = {{ getenv "CACHE_CLIENT_PRIVATE" }}
cache.client.no_cache = {{ getenv "CACHE_CLIENT_NO_CACHE" }}
cache.client.no_store = {{ getenv "CACHE_CLIENT_NO_STORE" }}
cache.client.must_revalidate = {{ getenv "CACHE_CLIENT_MUST_REVALIDATE" }}
cache.client.proxy_revalidate = {{ getenv "CACHE_CLIENT_PROXY_REVALIDATE" }}
cache.client.no_transform = {{ getenv "CACHE_CLIENT_NO_TRANSFORM" }}

###########################################################################
# SERVER-SIDE CACHING
###########################################################################

# Enables the source cache. Note that source images will only be cached
# when a FileProcessor is used with a StreamResolver, or when a
# StreamProcessor is used with `StreamProcessor.retrieval_strategy` set to
# `CacheStrategy`.
cache.server.source.enabled = {{ getenv "CACHE_SERVER_SOURCE_ENABLED" }}

# FilesystemCache is the only available source cache.
cache.server.source = {{ getenv "CACHE_SERVER_SOURCE" }}

# Enables the derivative (processed image) cache.
cache.server.derivative.enabled = {{ getenv "CACHE_SERVER_DERIVATIVE_ENABLED" }}

# Available values are `FilesystemCache`, `JdbcCache`, `RedisCache`,
# `HeapCache`, `AmazonS3Cache`, and `AzureStorageCache`.
cache.server.derivative = {{ getenv "CACHE_SERVER_DERIVATIVE" }}

# Whether to use the Java heap as a "level 1" cache for image infos, either
# independently or in front of a "level 2" derivative cache (if enabled).
cache.server.info.enabled = {{ getenv "CACHE_SERVER_INFO_ENABLED" }}

# Time before cached content (excluding info cache content) becomes invalid.
# Set to blank or 0 for never.
cache.server.ttl_seconds = {{ getenv "CACHE_SERVER_TTL_SECONDS" }}

# If true, when a resolver reports that the requested source image has gone
# missing, all cached information relating to it (if any) will be deleted.
# (This is effectively always false when cache.server.resolve_first is also
# false.)
cache.server.purge_missing = {{ getenv "CACHE_SERVER_PURGE_MISSING" }}

# If true, the source image will be confirmed to exist before a cached copy
# is returned. If false, the cached copy will be returned without checking.
# Resolving first is safer but slower.
cache.server.resolve_first = {{ getenv "CACHE_SERVER_RESOLVE_FIRST" }}

# !! Enables the cache worker, which periodically purges invalid cache
# items in the background.
cache.server.worker.enabled = {{ getenv "CACHE_SERVER_WORKER_ENABLED" }}

# !! The cache worker will start its shifts this many seconds apart.
cache.server.worker.interval = {{ getenv "CACHE_SERVER_WORKER_INTERVAL" }}

#----------------------------------------
# FilesystemCache
#----------------------------------------

# If this directory does not exist, it will be created automatically.
FilesystemCache.pathname = {{ getenv "FILESYSTEMCACHE_PATHNAME" }}

# Levels of folder hierarchy in which to store cached images. Deeper depth
# results in fewer files per directory. Set to 0 to disable subfolders.
# Purge the cache after changing this.
FilesystemCache.dir.depth = {{ getenv "FILESYSTEMCACHE_DIR_DEPTH" }}

# Number of characters in hierarchy directory names. Should be set to
# 16^n < (max number of directory entries your filesystem can deal with).
# Purge the cache after changing this.
FilesystemCache.dir.name_length = {{ getenv "FILESYSTEMCACHE_DIR_NAME_LENGTH" }}

#----------------------------------------
# HeapCache
#----------------------------------------

# Target cache size, in bytes or a number ending in M, MB, G, GB, etc.
# This is not a hard limit, and may be transiently exceeded.
# Ensure your heap can accommodate this size using the -Xmx= VM argument.
HeapCache.target_size = {{ getenv "HEAPCACHE_TARGET_SIZE" }}

# If true, the cache contents will be written to a file on exit, and read
# back in at startup.
HeapCache.persist = {{ getenv "HEAPCACHE_PERSIST" }}

# When the contents are persisted, this specifies the location of the cache
# file. If the parent directory does not exist, it will be created
# automatically.
HeapCache.persist.filesystem.pathname = {{ getenv "HEAPCACHE_PERSIST_FILESYSTEM_PATHNAME" }}

#----------------------------------------
# JdbcCache
#----------------------------------------

# !!
JdbcCache.url = {{ getenv "JDBCCACHE_URL" }}
# !!
JdbcCache.user = {{ getenv "JDBCCACHE_USER" }}
# !!
JdbcCache.password = {{ getenv "JDBCCACHE_PASSWORD" }}

# !! Connection timeout in seconds.
JdbcCache.connection_timeout = {{ getenv "JDBCCACHE_CONNECTION_TIMEOUT" }}

# These must be created manually; see the user manual.
JdbcCache.derivative_image_table = {{ getenv "JDBCCACHE_DERIVATIVE_IMAGE_TABLE" }}
JdbcCache.info_table = {{ getenv "JDBCCACHE_INFO_TABLE" }}

#----------------------------------------
# AmazonS3Cache
#----------------------------------------

# !! Credentials for your AWS account.
# See: http://aws.amazon.com/security-credentials
# Note that this info can be obtained from elsewhere rather than setting it
# here; see the user manual.
AmazonS3Cache.access_key_id = {{ getenv "AMAZONS3CACHE_ACCESS_KEY_ID" }}
AmazonS3Cache.secret_key = {{ getenv "AMAZONS3CACHE_SECRET_KEY" }}

# !! Name of a bucket to use to hold cached data.
AmazonS3Cache.bucket.name = {{ getenv "AMAZONS3CACHE_BUCKET_NAME" }}

# See: http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region
AmazonS3Cache.bucket.region = {{ getenv "AMAZONS3CACHE_BUCKET_REGION" }}

# !! String that will be prefixed to object keys.
AmazonS3Cache.object_key_prefix = {{ getenv "AMAZONS3CACHE_OBJECT_KEY_PREFIX" }}

# !! Maximum number of concurrent HTTP connections to AWS. Leave blank to
# use the default.
AmazonS3Cache.max_connections = {{ getenv "AMAZONS3CACHE_MAX_CONNECTIONS" }}

#----------------------------------------
# AzureStorageCache
#----------------------------------------

# !! Credentials for your Azure account.
AzureStorageCache.account_name = {{ getenv "AZURESTORAGECACHE_ACCOUNT_NAME" }}
AzureStorageCache.account_key = {{ getenv "AZURESTORAGECACHE_ACCOUNT_KEY" }}

# !! Name of the container containing cached images.
AzureStorageCache.container_name = {{ getenv "AZURESTORAGECACHE_CONTAINER_NAME" }}

# !! String that will be prefixed to object keys.
AzureStorageCache.object_key_prefix = {{ getenv "AZURESTORAGECACHE_OBJECT_KEY_PREFIX" }}

#----------------------------------------
# RedisCache
#----------------------------------------

# !! Redis connection info.
RedisCache.host = {{ getenv "REDISCACHE_HOST" }}
RedisCache.port = {{ getenv "REDISCACHE_PORT" }}
RedisCache.ssl = {{ getenv "REDISCACHE_SSL" }}
RedisCache.password = {{ getenv "REDISCACHE_PASSWORD" }}
RedisCache.database = {{ getenv "REDISCACHE_DATABASE" }}

###########################################################################
# OVERLAYS
###########################################################################

# Whether to enable overlays.
overlays.enabled = {{ getenv "OVERLAYS_ENABLED" }}

# Controls how overlays are configured. `BasicStrategy` will use the
# `overlays.BasicStrategy.*` keys in this section. `ScriptStrategy` will
# use the `overlay` delegate method. See the user manual for more
# information.
overlays.strategy = {{ getenv "OVERLAYS_STRATEGY" }}

# `image` or `string`.
overlays.BasicStrategy.type = {{ getenv "OVERLAYS_BASICSTRATEGY_TYPE" }}

# Absolute path or URL of the overlay image. Must be a PNG file.
overlays.BasicStrategy.image = {{ getenv "OVERLAYS_BASICSTRATEGY_IMAGE" }}

# Overlay text.
overlays.BasicStrategy.string = {{ getenv "OVERLAYS_BASICSTRATEGY_STRING" }}

# For possible values, launch with the -Dcantaloupe.list_fonts option.
overlays.BasicStrategy.string.font = {{ getenv "OVERLAYS_BASICSTRATEGY_STRING_FONT" }}

# Font size in points.
overlays.BasicStrategy.string.font.size = {{ getenv "OVERLAYS_BASICSTRATEGY_STRING_FONT_SIZE" }}

# If the string doesn't fit in the image at the above size, the largest size
# at which it does fit will be used, down to this.
overlays.BasicStrategy.string.font.min_size = {{ getenv "OVERLAYS_BASICSTRATEGY_STRING_FONT_MIN_SIZE" }}

# Font weight. 1 = regular, 2 = {{ getenv "# FONT WEIGHT_ 1 = REGULAR, 2" }}
# support fractional weights.
overlays.BasicStrategy.string.font.weight = {{ getenv "OVERLAYS_BASICSTRATEGY_STRING_FONT_WEIGHT" }}

# Point spacing between glyphs, typically between -0.1 and 0.1.
overlays.BasicStrategy.string.glyph_spacing = {{ getenv "OVERLAYS_BASICSTRATEGY_STRING_GLYPH_SPACING" }}

# CSS color syntax is supported.
overlays.BasicStrategy.string.color = {{ getenv "OVERLAYS_BASICSTRATEGY_STRING_COLOR" }}

# CSS color syntax is supported.
overlays.BasicStrategy.string.stroke.color = {{ getenv "OVERLAYS_BASICSTRATEGY_STRING_STROKE_COLOR" }}

# Stroke width in pixels.
overlays.BasicStrategy.string.stroke.width = {{ getenv "OVERLAYS_BASICSTRATEGY_STRING_STROKE_WIDTH" }}

# Color of a rectangular background to draw under the string.
# CSS color syntax and alpha are supported.
overlays.BasicStrategy.string.background.color = {{ getenv "OVERLAYS_BASICSTRATEGY_STRING_BACKGROUND_COLOR" }}

# Allowed values: `top left`, `top center`, `top right`, `left center`,
# `center`, `right center`, `bottom left`, `bottom center`, `bottom right`.
overlays.BasicStrategy.position = {{ getenv "OVERLAYS_BASICSTRATEGY_POSITION" }}

# Pixel margin between the overlay and the image edge.
overlays.BasicStrategy.inset = {{ getenv "OVERLAYS_BASICSTRATEGY_INSET" }}

# Output images less than this many pixels wide will not receive an overlay.
# Set to 0 to add the overlay regardless.
overlays.BasicStrategy.output_width_threshold = {{ getenv "OVERLAYS_BASICSTRATEGY_OUTPUT_WIDTH_THRESHOLD" }}

# Output images less than this many pixels tall will not receive an overlay.
# Set to 0 to add the overlay regardless.
overlays.BasicStrategy.output_height_threshold = {{ getenv "OVERLAYS_BASICSTRATEGY_OUTPUT_HEIGHT_THRESHOLD" }}

###########################################################################
# REDACTIONS
###########################################################################

# See the user manual for information about how redactions work.
redaction.enabled = {{ getenv "REDACTION_ENABLED" }}

###########################################################################
# LOGGING
###########################################################################

#----------------------------------------
# Application Log
#----------------------------------------

# `trace`, `debug`, `info`, `warn`, `error`, `all`, or `off`
log.application.level = {{ getenv "LOG_APPLICATION_LEVEL" }}

log.application.ConsoleAppender.enabled = {{ getenv "LOG_APPLICATION_CONSOLEAPPENDER_ENABLED" }}

# N.B.: Don't enable FileAppender and RollingFileAppender simultaneously!
log.application.FileAppender.enabled = {{ getenv "LOG_APPLICATION_FILEAPPENDER_ENABLED" }}
log.application.FileAppender.pathname = {{ getenv "LOG_APPLICATION_FILEAPPENDER_PATHNAME" }}

log.application.RollingFileAppender.enabled = {{ getenv "LOG_APPLICATION_ROLLINGFILEAPPENDER_ENABLED" }}
log.application.RollingFileAppender.pathname = {{ getenv "LOG_APPLICATION_ROLLINGFILEAPPENDER_PATHNAME" }}
log.application.RollingFileAppender.policy = {{ getenv "LOG_APPLICATION_ROLLINGFILEAPPENDER_POLICY" }}
log.application.RollingFileAppender.TimeBasedRollingPolicy.filename_pattern = {{ getenv "LOG_APPLICATION_ROLLINGFILEAPPENDER_TIMEBASEDROLLINGPOLICY_FILENAME_PATTERN" }}
log.application.RollingFileAppender.TimeBasedRollingPolicy.max_history = {{ getenv "LOG_APPLICATION_ROLLINGFILEAPPENDER_TIMEBASEDROLLINGPOLICY_MAX_HISTORY" }}

# See the "SyslogAppender" section for a list of facilities:
# http://logback.qos.ch/manual/appenders.html
log.application.SyslogAppender.enabled = {{ getenv "LOG_APPLICATION_SYSLOGAPPENDER_ENABLED" }}
log.application.SyslogAppender.host = {{ getenv "LOG_APPLICATION_SYSLOGAPPENDER_HOST" }}
log.application.SyslogAppender.port = {{ getenv "LOG_APPLICATION_SYSLOGAPPENDER_PORT" }}
log.application.SyslogAppender.facility = {{ getenv "LOG_APPLICATION_SYSLOGAPPENDER_FACILITY" }}

#----------------------------------------
# Error Log
#----------------------------------------

# Application log messages with a severity of WARN or greater can be copied
# into a dedicated error log, which may make them easier to spot.

# N.B.: Don't enable FileAppender and RollingFileAppender simultaneously!
log.error.FileAppender.enabled = {{ getenv "LOG_ERROR_FILEAPPENDER_ENABLED" }}
log.error.FileAppender.pathname = {{ getenv "LOG_ERROR_FILEAPPENDER_PATHNAME" }}

log.error.RollingFileAppender.enabled = {{ getenv "LOG_ERROR_ROLLINGFILEAPPENDER_ENABLED" }}
log.error.RollingFileAppender.pathname = {{ getenv "LOG_ERROR_ROLLINGFILEAPPENDER_PATHNAME" }}
log.error.RollingFileAppender.policy = {{ getenv "LOG_ERROR_ROLLINGFILEAPPENDER_POLICY" }}
log.error.RollingFileAppender.TimeBasedRollingPolicy.filename_pattern = {{ getenv "LOG_ERROR_ROLLINGFILEAPPENDER_TIMEBASEDROLLINGPOLICY_FILENAME_PATTERN" }}
log.error.RollingFileAppender.TimeBasedRollingPolicy.max_history = {{ getenv "LOG_ERROR_ROLLINGFILEAPPENDER_TIMEBASEDROLLINGPOLICY_MAX_HISTORY" }}

#----------------------------------------
# Access Log
#----------------------------------------

log.access.ConsoleAppender.enabled = {{ getenv "LOG_ACCESS_CONSOLEAPPENDER_ENABLED" }}

# N.B.: Don't enable FileAppender and RollingFileAppender simultaneously!
log.access.FileAppender.enabled = {{ getenv "LOG_ACCESS_FILEAPPENDER_ENABLED" }}
log.access.FileAppender.pathname = {{ getenv "LOG_ACCESS_FILEAPPENDER_PATHNAME" }}

# RollingFileAppender is an alternative to using something like
# FileAppender + logrotate.
log.access.RollingFileAppender.enabled = {{ getenv "LOG_ACCESS_ROLLINGFILEAPPENDER_ENABLED" }}
log.access.RollingFileAppender.pathname = {{ getenv "LOG_ACCESS_ROLLINGFILEAPPENDER_PATHNAME" }}
log.access.RollingFileAppender.policy = {{ getenv "LOG_ACCESS_ROLLINGFILEAPPENDER_POLICY" }}
log.access.RollingFileAppender.TimeBasedRollingPolicy.filename_pattern = {{ getenv "LOG_ACCESS_ROLLINGFILEAPPENDER_TIMEBASEDROLLINGPOLICY_FILENAME_PATTERN" }}
log.access.RollingFileAppender.TimeBasedRollingPolicy.max_history = {{ getenv "LOG_ACCESS_ROLLINGFILEAPPENDER_TIMEBASEDROLLINGPOLICY_MAX_HISTORY" }}

# See the "SyslogAppender" section for a list of facilities:
# http://logback.qos.ch/manual/appenders.html
log.access.SyslogAppender.enabled = {{ getenv "LOG_ACCESS_SYSLOGAPPENDER_ENABLED" }}
log.access.SyslogAppender.host = {{ getenv "LOG_ACCESS_SYSLOGAPPENDER_HOST" }}
log.access.SyslogAppender.port = {{ getenv "LOG_ACCESS_SYSLOGAPPENDER_PORT" }}
log.access.SyslogAppender.facility = {{ getenv "LOG_ACCESS_SYSLOGAPPENDER_FACILITY" }}
